# -*- coding: utf-8 -*-

import os
import requests
from telebot import types
from datetime import datetime


CONFIG = {
    'start': '''–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –†–∞–¥–∏–æ–ö–ü–ò. 
–¢—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é, –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫–∂–µ –º—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
–£–∑–Ω–∞—Ç—å —á—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç
–£–∑–Ω–∞—Ç—å –∫–∞–∫ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –ª–∞–º–ø–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –†–∞–¥–∏–æ–ö–ü–ò.
–£–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –†–∞–¥–∏–æ–ö–ü–ò –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.''',
    'menu': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üòú',

    'feedback': '–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –†–∞–¥–∏–æ–ö–ü–ò –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à–∏ —Ä—è–¥—ã! \n \
–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç —Ç–µ–±–µ! \n(‚õîÔ∏è/cancel)',
    'feedback_thanks': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–µ!',

    'predlozka_choose_song': '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å? (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ø–µ—Å–Ω—è) \n(‚õîÔ∏è/cancel)',
    'predlozka_moderating': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ ({0}), –æ–∂–∏–¥–∞–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!',  # –≤—Ä–µ–º—è
    'predlozka_ok': '–í–∞—à –∑–∞–∫–∞–∑ ({0}) –ø—Ä–∏–Ω—è—Ç!',  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
    'predlozka_ok_next': '–í–∞—à –∑–∞–∫–∞–∑ ({0}) –ø—Ä–∏–Ω—è—Ç –∏ –∑–∞–∏–≥—Ä–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
    'predlozka_neok': '–í–∞—à –∑–∞–∫–∞–∑ ({0}) –æ—Ç–∫–ª–æ–Ω–µ–Ω(',

    'what_played_choose_time': '–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –∏–≥—Ä–∞–ª–∞ –ø–µ—Å–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 18:20) \n(‚õîÔ∏è/cancel)',

    'error': '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å(',

    'save_pic': '–û–∫–µ–π, –∫–∏–¥–∞–π —Ñ–æ—Ç–æ—à–∫–∏, —è –∑–∞–ª—å—é!',

    'pics_path': 'D:\\pics\\',
    'days1': ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
    'days2': ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–°–µ–π—á–∞—Å'],
    'times': ['–ü–µ—Ä–≤—ã–π', '–í—Ç–æ—Ä–æ–π', '–¢—Ä–µ—Ç–∏–π', '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π'],
}

btn = {
    'what_playing': 'üéß–ß—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç?',
    'predlozka': 'üìù–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é',
    'feedback_v_komandu': 'üñå–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
    'pokazhi': 'üì∑–ü–æ–∫–∞–∂–∏ —Ä–∞–¥–∏–æ',
}


def get_music_path(day, time):
    t = 'D:\\–í–µ—â–∞–Ω–∏–µ –†–∞–¥–∏–æ\\'
    # –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω–æ–π(0) –∏ –≤–µ—á–µ—Ä–Ω–∏–π(1) —ç—Ñ–∏—Ä
    if day == 6:
        t += '({0}){1}\\{2}\\'.format(day+1, CONFIG['days1'][day], ['–î–Ω–µ–≤–Ω–æ–π —ç—Ñ–∏—Ä', '–í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä'][time-1])
    # –î–æ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —ç—Ñ–∏—Ä–∞
    elif time < 5:
        t += '–ü–µ—Ä–µ—Ä—ã–≤\\0{0}_{1}\\{2}.{3} –ø–µ—Ä–µ—Ä—ã–≤\\'.format(
            day+1, CONFIG['days1'][day], time, CONFIG['times'][time-1])
    # –í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä
    else:
        t += '({0}){1}\\'.format(day+1, CONFIG['days1'][day])

    return t


def keyboard_start():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(btn[t]) for t in btn])
    return keyboard


def keyboard_day():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btns = []
    day = datetime.today().weekday()

    if get_break_num() != 0:
        btns.append(types.InlineKeyboardButton(
            text=CONFIG['days2'][3], callback_data='predlozka-|-' + str(day) + '-|-' + str(get_break_num())))

    if datetime.now().hour < 22:
        btns.append(types.InlineKeyboardButton(
            text=CONFIG['days2'][0], callback_data='predlozka_day-|-' + str(day)))

    for i in range(1, 3):
        btns.append(types.InlineKeyboardButton(
            text=CONFIG['days2'][i], callback_data='predlozka_day-|-' + str((day+i) % 7)))

    btns.append(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='predlozka_cancel'))
    keyboard.add(*btns)
    return keyboard


def keyboard_time(day):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btns = []
    time = datetime.now().hour * 60 + datetime.now().minute
    today = day == datetime.today().weekday()

    if day == 6:
        if not today or time < 18 * 60:
            btns.append(types.InlineKeyboardButton(text='–î–Ω–µ–º', callback_data='predlozka-|-6-|-1'))
        btns.append(types.InlineKeyboardButton(text='–í–µ—á–µ—Ä–æ–º', callback_data='predlozka-|-6-|-2'))
    else:
        for i in range(1, 5):
            if today and time > 8*60+30 + 115*i:
                continue  # –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
            btns.append(types.InlineKeyboardButton(
                text='–ü–æ—Å–ª–µ ' + str(i) + ' –ø–∞—Ä—ã',
                callback_data='predlozka-|-' + str(day) + '-|-' + str(i)
            ))

        btns.append(types.InlineKeyboardButton(
                text='–í–µ—á–µ—Ä–æ–º', callback_data='predlozka-|-' + str(day) + '-|-' + '5'))

    btns.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='predlozka_back_day'))
    keyboard.add(*btns)
    return keyboard


def get_audio_name(audio):
    name = str(audio.performer) + ' - ' + str(audio.title)
    name = ''.join(list(filter(lambda c: (c not in '\/:*?"<>|'), name)))  # –≤–∏–Ω–¥–∞ –∞–≥—Ä–∏—Ç—Å—è –Ω–∞ —ç—Ç–∏ —Å–∏–º–≤–æ–ª—ã –≤ –ø—É—Ç–∏
    return name


def get_user_name(user_obj):
    return '<a href="tg://user?id={0}">{1}</a>'.format(user_obj.id, user_obj.first_name)


def save_file(url, to):
    dirname = os.path.dirname(to)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    if os.path.isfile(to):
        return

    print('Donwloading... ', to)
    try:
        file = requests.get(url, stream=True)
        f = open(to, 'wb')
        for chunk in file.iter_content(chunk_size=512):
            if chunk:
                f.write(chunk)
        f.close()
        print('downloaded')
    except Exception as e:
        print('Error: download!', e)


def get_break_num(time=None):
    day = datetime.today().weekday()
    if not time:
        time = datetime.now()
    time = time.hour * 60 + time.minute

    if time > 22*60 or time < 10*60+5:
        return 0

    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    if day == 6:
        if 11*60+15 < time < 18*60:
            return 1
        if time > 18*60:
            return 2

    # –í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä
    if time > 17*60+50:
        return 5

    # –ü–µ—Ä–µ—Ä—ã–≤
    for i in range(4):
        # 10:05 + –ø–∞—Ä–∞ * i (10:05 - –Ω–∞—á–∞–ª–æ 1 –ø–µ—Ä–µ—Ä—ã–≤–∞)
        if 0 < time - (10*60+5 + i*115) < 18:  # —Å–¥–≤–∏–≥ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            return i+1

    #–ü–∞—Ä–∞
    return 0


def check_bad_words(text):
    if '–û—à–∏–±–∫–∞' in text:
        return text

    bad_words = ['–ø–∏–∑–¥',
                 '–±–ª—è',
                 '—Ö—É–π', '—Ö—É—è', '—Ö—É–∏', '—Ö—É–µ',
                 '–µ–±–∞—Ç—å', '–µ–±–∏', '–µ–±–ª–æ', '–µ–±–ª—è', '–µ–±—É—á',
                 '–¥–æ–ª–±–æ',
                 '–¥—Ä–æ—á–∏—Ç',
                 '–º—É–¥–∞–∫', '–º—É–¥–∏–ª–æ',
                 '–ø–∏–¥–æ—Ä', '–ø–∏–¥–∞—Ä',
                 '—Å—É–∫–∞', '—Å—É–∫—É',
                 '–≥–∞–Ω–¥–æ–Ω',
                 'fuck']

    answ = []
    for word in bad_words:
        if word in text:
            answ.append(word)

    if not answ:
        return "–í—Å–µ –æ–∫ –≤—Ä–æ–¥—å"
    else:
        return "–ù–∞—à–µ–ª —ç—Ç–æ: " + ' '.join(answ)
