import logging
import os
import shutil
import xml.etree.ElementTree as Etree
from aiogram import types
from datetime import datetime
from urllib.parse import quote
from music_api import radioboss_api
from base64 import b64decode, b64encode
from config import *
from typing import Union



TEXT = {
    'start': '''–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –†–∞–¥–∏–æ–ö–ü–ò. 
–¢—ã –º–æ–∂–µ—à—å:
 - –ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é   
 - –ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å
 - –£–∑–Ω–∞—Ç—å, —á—Ç–æ –∏–≥—Ä–∞–µ—Ç —Å–µ–π—á–∞—Å, –∏–≥—Ä–∞–ª–æ –∏–ª–∏ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å
 - –£–∑–Ω–∞—Ç—å, –∫–∞–∫ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –ª–∞–º–ø–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –†–∞–¥–∏–æ–ö–ü–ò.
 
‚ÅâÔ∏è–°–æ–≤–µ—Ç—É–µ–º –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é /help
''',
    'menu': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üòú',

    'help': {
        'orders': '''
üìù–ï—Å—Ç—å 3 —Å–ø–æ—Å–æ–±–∞ <b>–∑–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é:</b>
- –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <code>–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é</code> –∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–æ—Ç –≤—ã–±–µ—Ä–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (–≤–≤–µ—Å—Ç–∏ <code>@kpiradio_bot</code> –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É). 
    –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ 50 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª—É—à–∞—Ç—å
- –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –±–æ—Ç—É –∂–µ–ª–∞–µ–º—É—é –ø–µ—Å–Ω—é
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞.''',

        'criteria': '''
 <b>‚ùóÔ∏è–°–æ–≤–µ—Ç—ã:</b>
- –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Å–µ–Ω —Å—Ä–∞–∑—É, –∏—Ö –≤—Å–µ –µ—â–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ª—é–¥–∏, –∞ –Ω–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
- –£—á—Ç–∏—Ç–µ, —á—Ç–æ —É –ø–µ—Å–µ–Ω —Å –Ω–µ—Ö–æ—Ä–æ—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ —Å–º—ã—Å–ª–æ–º –≤—ã—Å–æ–∫–∏–π —à–∞–Ω—Å –Ω–µ –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –ø–µ—Å–Ω–∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º <i>(–≥—É–≥–ª "–∫–≤–æ—Ç—ã –Ω–∞ —Ä–∞–¥–∏–æ")</i>
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ, —Å–ø–æ–∫–æ–π–Ω—ã–µ –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–≤–ª–µ–∫–∞—Ç—å –æ—Ç —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ''',

        'playlist': '''
<b>‚è≠–ü–ª–µ–π–ª–∏—Å—Ç —Ä–∞–¥–∏–æ:</b>
- –£–∑–Ω–∞—Ç—å —á—Ç–æ –∏–≥—Ä–∞–µ—Ç —Å–µ–π—á–∞—Å, –∏–≥—Ä–∞–ª–æ –¥–æ —ç—Ç–æ–≥–æ –∏–ª–∏ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "<code>–ß—Ç–æ –∏–≥—Ä–∞–µ—Ç</code>"
- –ü–æ–º–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –∏–≥—Ä–∞–ª–∞ –ø–µ—Å–Ω—è –∏ —Ö–æ—Ç–∏—Ç–µ –µ–µ –Ω–∞–π—Ç–∏? –ú–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–µ —Ç–∞–º –∂–µ -> <code>–ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</code>
- –ï—Å–ª–∏ –≤—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–µ—Å–Ω—é –≤–æ –≤—Ä–µ–º—è —ç—Ñ–∏—Ä–∞, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ –±—ã –æ–Ω–∞ –∑–∞–∏–≥—Ä–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π
- –ó–∞–∫–∞–∑ <b>–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π</b>. –ï—Å–ª–∏ –≤–∞—à–∞ –ø–µ—Å–Ω—è –Ω–µ —É—Å–ø–µ–ª–∞ –≤–æ–π—Ç–∏ –≤ —ç—Ñ–∏—Ä - –∑–∞–∫–∞–∂–∏—Ç–µ <b>–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑</b>.''',

        'feedback': '''
  <b>üñå–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>
- –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–æ–≤ —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –Ω–∏—Ö –∏ –æ —Ä–∞–¥–∏–æ
- –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —Ä–∞–¥–∏–æ - –ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –∏ –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∞–Ω–∫–µ—Ç–∞–º
- –°—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —Ç–æ –Ω–µ—É–¥–æ–±–Ω—ã–º? –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é? –ù–µ –∑–∞–¥—É–º—ã–≤–∞—è—Å—å –ø–∏—à–∏ –Ω–∞–º.      
        ''',

        'btns': {
            'orders': 'üìù–ó–∞–∫–∞–∑ –ø–µ—Å–Ω–∏',
            'criteria': '‚ùó–ö—Ä–∏—Ç–µ—Ä–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'playlist': '‚è≠–¢–æ–Ω–∫–æ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞',
            'feedback': 'üñå–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'
        },
        'first_msg': '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É. (–°–æ–≤–µ—Ç—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ)',
    },

    'feedback': '–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –†–∞–¥–∏–æ–ö–ü–ò –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à–∏ —Ä—è–¥—ã! \n \
–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç —Ç–µ–±–µ! \n(‚õîÔ∏è/cancel)',
    'feedback_thanks': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–µ!',

    'predlozka_choose_song': '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∫–∏–Ω—å —Å–≤–æ—é –ø–µ—Å–Ω—é\n(‚õîÔ∏è/cancel)',
    'predlozka_inline_search': '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ üëÄ',

    'predlozka_moderating': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ ({0}), –æ–∂–∏–¥–∞–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!',  # –≤—Ä–µ–º—è
    'predlozka_ok': '–í–∞—à –∑–∞–∫–∞–∑ ({0}) –ø—Ä–∏–Ω—è—Ç!',  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
    'predlozka_ok_next': '–í–∞—à –∑–∞–∫–∞–∑ ({0}) –ø—Ä–∏–Ω—è—Ç –∏ –∑–∞–∏–≥—Ä–∞–µ—Ç {1}',
    'predlozka_neok': '–í–∞—à –∑–∞–∫–∞–∑ ({0}) –æ—Ç–∫–ª–æ–Ω–µ–Ω(',

    'what_playing': """‚èÆ <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫: </b> {0}, 
‚ñ∂Ô∏è <b>–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: </b> {1}
‚è≠ <b>–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫: </b> {2}""",

    'song_no_prev': '–ù–µ –∑–Ω–∞—é(',
    'song_no_next': '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —ç—Ñ–∏—Ä–∞',

    'error': '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å(',
    'unknown_cmd': '–®–æ —Ç—ã —Ö–æ—à? –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é". –ü–æ–º–æ—â—å —Ç—É—Ç /help',

    'days1': ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
    'days2': ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–°–µ–π—á–∞—Å'],
    'times': ['–£—Ç—Ä–µ–Ω–∏–π —ç—Ñ–∏—Ä', '–ü–µ—Ä–≤—ã–π –ø–µ—Ä–µ—Ä—ã–≤', '–í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—Ä—ã–≤', '–¢—Ä–µ—Ç–∏–π –ø–µ—Ä–µ—Ä—ã–≤', '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–µ—Ä–µ—Ä—ã–≤', '–í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä'],
}

btn = {
    'predlozka': 'üìù–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é',
    'what_playing': 'üéß–ß—Ç–æ –∏–≥—Ä–∞–µ—Ç?',
    'help': '‚ÅâÔ∏è–ü–æ–º–æ—â—å',
    'feedback': 'üñå–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
}

paths = {
    'orders': Path('D:/–í–µ—â–∞–Ω–∏–µ –†–∞–¥–∏–æ/–ó–∞–∫–∞–∑—ã'),
    'archive': Path('D:/–í–µ—â–∞–Ω–∏–µ –†–∞–¥–∏–æ/–ê—Ä—Ö–∏–≤'),
    'ether': Path('D:/–í–µ—â–∞–Ω–∏–µ –†–∞–¥–∏–æ/–≠—Ñ–∏—Ä'),
}

keyboard_predlozka_inline = types.InlineKeyboardMarkup()
keyboard_predlozka_inline.add(types.InlineKeyboardButton("–£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫", switch_inline_query_current_chat=""))

keyboard_start = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
keyboard_start.add(types.KeyboardButton(btn['what_playing']), types.KeyboardButton(btn['predlozka']))
keyboard_start.add(types.KeyboardButton(btn['feedback']), types.KeyboardButton(btn['help']))

keyboard_what_playing = types.InlineKeyboardMarkup(row_width=2)
keyboard_what_playing.add(types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏', url='https://t.me/rkpi_music'))
keyboard_what_playing.add(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç—Ä–µ–∫–∏', callback_data='song_prev'),
                          types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏', callback_data='song_next'))

keyboard_help = types.InlineKeyboardMarkup(row_width=1)
for k, v in TEXT['help']['btns'].items():
    keyboard_help.add(types.InlineKeyboardButton(text=v, callback_data=f'help-|-{k}'))


def get_music_path(day: int, time: int = False) -> Path:
    t = paths['orders']
    t /= '0{0}_{1}'.format(day + 1, TEXT['days1'][day])

    if time is False:  # —Å—É–∫–∞ 0 —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ False
        return t

    if day == 6:  # –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–æ–ª—å–∫–æ —É—Ç—Ä–µ–Ω–Ω–∏–π(0) –∏ –≤–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä(5)
        t /= TEXT['times'][time]
    elif time < 5:  # –î–æ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —ç—Ñ–∏—Ä–∞
        t /= '{0}.{1}'.format(time, TEXT['times'][time])
    else:  # –í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä
        t /= '({0}){1}\\'.format(day + 1, TEXT['days1'][day])

    return t


def get_break_num(time: datetime = None) -> Union[bool, int]:
    if not time:
        time = datetime.now()
        day = datetime.today().weekday()
    else:
        day = time.weekday()
    time = time.hour * 60 + time.minute

    if time > 22 * 60 or time < 7 * 60:
        return False

    if day == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if 11 * 60 + 15 < time < 18 * 60:  # –£—Ç—Ä–µ–Ω–Ω–∏–π —ç—Ñ–∏—Ä
            return 0
        if time > 18 * 60:  # –í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä
            return 5

    if time <= 8 * 60 + 30:  # –£—Ç—Ä–µ–Ω–Ω–∏–π —ç—Ñ–∏—Ä
        return 0

    if time >= 17 * 60 + 50:  # –í–µ—á–µ—Ä–Ω–∏–π —ç—Ñ–∏—Ä
        return 5

    for i in range(4):  # –ü–µ—Ä–µ—Ä—ã–≤
        # 10:05 + –ø–∞—Ä–∞ * i   (10:05 - –Ω–∞—á–∞–ª–æ 1 –ø–µ—Ä–µ—Ä—ã–≤–∞)
        if 0 <= time - (10 * 60 + 5 + i * 115) <= 20:
            return i + 1

    # –ù–µ –ø–µ—Ä–µ—Ä—ã–≤
    return False


def get_break_name(time: int) -> str:
    return TEXT['times'][time]


def is_break_now(day: int, time: int) -> bool:
    return day == datetime.today().weekday() and time is get_break_num()


def keyboard_day() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btns = []
    day = datetime.today().weekday()

    if get_break_num() is not False:
        btns.append(types.InlineKeyboardButton(
            text=TEXT['days2'][3], callback_data='predlozka-|-' + str(day) + '-|-' + str(get_break_num())))

    if datetime.now().hour < 22:
        btns.append(types.InlineKeyboardButton(
            text=TEXT['days2'][0], callback_data='predlozka_day-|-' + str(day)))

    for i in range(1, 3):
        btns.append(types.InlineKeyboardButton(
            text=TEXT['days2'][i], callback_data='predlozka_day-|-' + str((day + i) % 7)))

    btns.append(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='predlozka_cancel'))
    keyboard.add(*btns)
    return keyboard


def keyboard_time(day: int) -> types.InlineKeyboardMarkup:

    def get_btn(time: int) -> types.InlineKeyboardButton:
        return types.InlineKeyboardButton(
                text=get_break_name(time),
                callback_data=f'predlozka-|-{day}-|-{time}'
            )

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btns = []
    time = datetime.now().hour * 60 + datetime.now().minute
    today = day == datetime.today().weekday()

    if day == 6:
        if not today or time < 18 * 60:
            btns.append(get_btn(0))
    else:
        for i in range(0, 5):
            if today and time > 8 * 60 + 30 + 115 * i:
                continue  # –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
            btns.append(get_btn(i))

    btns.append(get_btn(5))

    btns.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='predlozka_back_day'))
    keyboard.add(*btns)
    return keyboard


def keyboard_admin(day: int, time: int, audio_name: str, user_id: int) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            text='–ü—Ä–∏–Ω—è—Ç—å',
            callback_data='-|-'.join(['predlozka_answ', 'ok', str(user_id), str(day), str(time)])
        ),
        types.InlineKeyboardButton(
            text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            callback_data='-|-'.join(['predlozka_answ', 'neok', str(user_id), str(day), str(time)])
        ),
        types.InlineKeyboardButton(
            text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç',
            url=f'https://{HOST}/gettext/{quote(audio_name[0:100])}'
        ),
        types.InlineKeyboardButton(
            text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
            callback_data='check_text'
        )
    )
    return keyboard


def get_audio_name(audio: types.Audio) -> str:
    if not audio.performer and not audio.title:
        name = '–ù–∞–∑–≤–∞–Ω–∏—è –Ω–µ—Ç—É :('
    else:
        name = ' - '.join([str(audio.performer), str(audio.title)])
    name = ''.join(list(filter(lambda c: (c not in '/:*?"<>|'), name)))  # –≤–∏–Ω–¥–∞ –∞–≥—Ä–∏—Ç—Å—è –Ω–∞ —ç—Ç–∏ —Å–∏–º–≤–æ–ª—ã –≤ –ø—É—Ç–∏
    return name


def get_user_name(user_obj: types.User) -> str:
    return '<a href="tg://user?id={0}">{1}</a>'.format(user_obj.id, user_obj.first_name)


def create_dirs(to: Union[str, Path]) -> None:
    dirname = os.path.dirname(to)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    if os.path.isfile(to):
        return


def delete_file(path: Path) -> None:
    if not path.exists():
        return
    try:
        path.unlink()
    except Exception as ex:
        logging.error(f'delete file: {ex} {path}')




async def write_sender_tag(path: Path, user_obj: types.User) -> None:
    tags = await radioboss_api(action='readtag', fn=path)
    name = get_user_name(user_obj)
    name = b64encode(name.encode('utf-8')).decode('utf-8')
    tags[0].attrib['Comment'] = name
    xmlstr = Etree.tostring(tags, encoding='utf8', method='xml').decode('utf-8')
    await radioboss_api(action='writetag', fn=path, data=xmlstr)


async def read_sender_tag(path: Path) -> Union[bool, str]:
    tags = await radioboss_api(action='readtag', fn=path)
    name = tags[0].attrib['Comment']
    try:
        name = b64decode(name).decode('utf-8')
    except:
        return False
    return name


async def delete_old_orders() -> None:
    wd = datetime.now().weekday()
    src = str(get_music_path(wd))  # –∑–∞–∫–∞–∑—ã
    dst = str(paths['archive'])  # –∞—Ä—Ö–∏–≤

    if not os.path.exists(dst):
        os.makedirs(dst)

    for src_dir, dirs, files in os.walk(src):
        for file_ in files:
            src_file = os.path.join(src_dir, file_)
            dst_file = os.path.join(dst, file_)
            try:
                shutil.move(src_file, dst_file)
            except Exception as ex:
                logging.error(f'move file: {ex} {src_file}')


def check_bad_words(text: str) -> str:
    if '–û—à–∏–±–∫–∞' in text:
        return text

    bad_words = ['–ø–∏–∑–¥',
                 '–±–ª—è',
                 '—Ö—É–π', '—Ö—É—è', '—Ö—É–∏', '—Ö—É–µ',
                 '–µ–±–∞—Ç—å', '–µ–±–∏', '–µ–±–ª–æ', '–µ–±–ª—è', '–µ–±—É—á',
                 '–¥–æ–ª–±–æ',
                 '–¥—Ä–æ—á–∏—Ç',
                 '–º—É–¥–∞–∫', '–º—É–¥–∏–ª–æ',
                 '–ø–∏–¥–æ—Ä', '–ø–∏–¥–∞—Ä',
                 '—Å—É–∫–∞', '—Å—É–∫—É',
                 '–≥–∞–Ω–¥–æ–Ω',
                 'fuck']

    answ = []
    for word in bad_words:
        if word in text:
            answ.append(word)

    if not answ:
        return "–í—Å–µ –æ–∫ –≤—Ä–æ–¥—å"
    else:
        return "–ù–∞—à–µ–ª —ç—Ç–æ: " + ' '.join(answ)


def reboot() -> None:
    os.system(r'cmd.exe /C start ' + os.getcwd() + '\\update.bat')

